{"version":3,"sources":["Components/Input.js","Components/Form.js","Components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","react_default","a","createElement","className","id","name","type","value","onChange","handleChange","placeholder","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","textareaValue","email","textarea","bind","assertThisInitialized","handleSubmit","event","key","target","setState","defineProperty","preventDefault","data","phone","address","fetch","method","headers","Accept","Content-Type","mode","body","JSON","stringify","then","response","json","console","log","catch","error","onSubmit","Components_Input","title","rows","React","Component","Cards","projects","description","img","hover","tools","Frontend","Backend","Database","handleMouseEnter","handleMouseLeave","persist","prevState","map","project","src","alt","toolsdivs","keys","unshift","_this2","onMouseEnter","onMouseLeave","content","App","xmlns","viewBox","preserveAspectRatio","fill","points","href","scrollAnimation_min_default","animateIn","animateOnce","Components_Cards","Components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c256bc7.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Input = (props) => {\r\n    return (  \r\n  <div className=\"form-group\">\r\n    \r\n    <input\r\n      className=\"form-input\"\r\n      id={props.name}\r\n      name={props.name}\r\n      type={props.type}\r\n      value={props.value}\r\n      onChange={props.handleChange}\r\n      placeholder={props.placeholder} \r\n    />\r\n  </div>\r\n)\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\"\r\nimport Input from \"./Input\"\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        value: '', \r\n        textareaValue: '', \r\n        name: '', \r\n        email: '',\r\n        textarea: ''\r\n      }\r\n\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleChange(event) {\r\n      const key = event.target.name;\r\n      this.setState({[key]: event.target.value});\r\n    }\r\n  \r\n    handleSubmit(event) {\r\n      // alert('A name was submitted: ' + this.state.name + this.state.email + this.state.textarea);\r\n      event.preventDefault();\r\n      let data = {\r\n        name: this.state.name,\r\n        phone: this.state.email,\r\n        address: this.state.textarea\r\n    };\r\n      fetch(\"/submitform\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        mode: \"cors\",\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => response.json())\r\n        .then(data => console.log(data))\r\n        .catch(error => console.log(error));\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n          <div className=\"divForm\">\r\n          \r\n        <form onSubmit={this.handleSubmit}>\r\n        <h4>CONTACT</h4>\r\n        <Input type={'text'}\r\n                    title= {'Name'} \r\n                    name= {'name'}\r\n                    value={this.state.name} \r\n                    placeholder = {'Name'}\r\n                    handleChange = {this.handleChange}\r\n                    /> \r\n        <Input type={'email'}\r\n                    title= {'email'} \r\n                    name= {'email'}\r\n                    value={this.state.email} \r\n                    placeholder = {'Email'}\r\n                    handleChange = {this.handleChange}\r\n                    />\r\n        <textarea\r\n                    title= 'textarea' \r\n                    name= 'textarea'\r\n                    value={this.state.textarea} \r\n                    placeholder = ' Message'\r\n                    onChange = {this.handleChange}\r\n                    rows=\"6\"  \r\n                    >  </textarea>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Form","import React from \"react\"\r\n\r\nclass Cards extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            projects: [\r\n                {\r\n                    id: \"1\",\r\n                    title: 'Mums Organiser',\r\n                    description: 'A website designed for young mums',\r\n                    img: 'mumsorganiser',\r\n                    hover: false,\r\n                    tools: {\r\n                        Frontend:'vue.js',\r\n                        Backend: 'node.js',\r\n                        Database: 'firebase'\r\n                    }\r\n                },\r\n                {\r\n                    id: '2',\r\n                    title: 'Some Brand',\r\n                    description: 'A website blabla bla',\r\n                    hover: false,\r\n                    tools: {\r\n                        Frontend:'angular.js',\r\n                        Backend: 'php',\r\n                        Database: 'mysql'\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n        this.handleMouseEnter = this.handleMouseEnter.bind(this)\r\n        this.handleMouseLeave = this.handleMouseLeave.bind(this)\r\n    }\r\n       handleMouseEnter(event){\r\n        event.persist();\r\n           console.log('mouse over', event, event.target)\r\n            this.setState(prevState => {\r\n               const newstate = prevState.projects.map(project => {\r\n                   console.log(project.id, event.target.id)\r\n                    if(project.id === event.target.id){\r\n                        project.hover = true\r\n                    }\r\n                    return project\r\n            })\r\n            return newstate\r\n        })\r\n    }\r\n        handleMouseLeave(event){\r\n            event.persist();\r\n               console.log('mouse leave', event, event.target)\r\n                this.setState(prevState => {\r\n                   const newstate = prevState.projects.map(project => {\r\n                       console.log(project.id, event.target.id)\r\n                        if(project.id === event.target.id){\r\n                            project.hover = false\r\n                        }\r\n                        return project\r\n                })\r\n                return newstate\r\n            })\r\n    }\r\n     content(project){\r\n        if(!project.hover){\r\n        return (\r\n            <div><img src={\"/\" + project.img + \".jpg\"} id={project.id} alt={project.img}></img>\r\n    <h5>{project.title}</h5>\r\n    <p>{project.description}</p></div>\r\n        )\r\n    } else if(project.hover) {\r\n        const toolsdivs = Object.keys(project.tools).map(key => {  return <div className=\"hoveredCardDiv\"><p>{key}</p> {project.tools[key]} </div> })\r\n        toolsdivs.unshift(<h3>TECHNOLOGIES USED</h3> )\r\n        return toolsdivs\r\n\r\n    }\r\n}\r\n    \r\n    render(){\r\n        \r\n        return (\r\n            <div className=\"cards\" >\r\n            {this.state.projects.map(project => {\r\n             \r\n                return (\r\n                    <div className={project.hover ? \"hoveredCard card\" : \"card\"}\r\n                    id={project.id} key={project.id} \r\n                    onMouseEnter={this.handleMouseEnter}\r\n                    onMouseLeave={this.handleMouseLeave}>\r\n                    {this.content(project)}\r\n                    {/* <p className=\"rotate\">Coming soon</p> */}\r\n                    \r\n                    </div>\r\n                )\r\n              \r\n            })}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards","import React, { Component } from 'react';\nimport './App.css';\nimport ScrollAnimation from 'react-animate-on-scroll';\nimport \"animate.css/animate.min.css\";\nimport Form from \"./Components/Form\"\nimport Cards from \"./Components/Cards\"\n\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"\">\n        <div id=\"mycontainer\" className=\"mycontainer\" >\n       <div className=\"row\">\n          <h1>My name is Olga Kokhanova, I'm a web developer based in St.Petersburg, Russia.</h1>\n         \n      </div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n          <polygon fill=\"white\" points=\"0,100 100,0 100,100\"/>\n        </svg>\n        <div className=\"btn\"><a href=\"#container2\">Learn more</a></div>\n      </div>\n      <div className=\"mycontainer\"id=\"container2\">\n          <div className=\"row\">\n              <div className=\"block\"> <h2>MY PROJECTS</h2></div>\n         \n              <ScrollAnimation animateIn=\"fadeInUp\" animateOnce  >\n         \n         \n             <Cards />\n             \n          \n          \n          </ScrollAnimation>\n      </div>\n      </div>\n      <div className=\"mycontainer\" id=\"container3\">\n               <Form />\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}